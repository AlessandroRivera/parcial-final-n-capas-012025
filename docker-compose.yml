# Docker Compose para Sistema de Soporte Técnico
# Incluye: Spring Boot App + PostgreSQL + Red personalizada

version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: supportdb-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: supportdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - support-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d supportdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Spring Boot
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: support-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Configuración de base de datos
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/supportdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      
      # Configuración JWT
      JWT_SECRET: mySecretKeyForJWTTokenGeneration
      JWT_EXPIRATION: 3600000
      
      # Configuración del servidor
      SERVER_PORT: 8080
      
      # Profile activo
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      db:
        condition: service_healthy
    networks:
      - support-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Definición de volúmenes
volumes:
  postgres_data:
    driver: local

# Definición de red personalizada
networks:
  support-network:
    driver: bridge 